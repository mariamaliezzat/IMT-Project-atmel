
IMT project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000114  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ad  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067c  00000000  00000000  00000a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f4  00000000  00000000  00001099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017c  00000000  00000000  000017db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  8a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_13>:

#include"MCAL/UART.h"
#include <util/delay.h>

void __vector_13(void) __attribute__((signal));			//RX interrupt
void __vector_13(void){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
	
	
}
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <main>:

int main(void)
{	
	u8 x ;
    /* Replace with your application code */
	UART_voidInit();
  a6:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_voidInit>
	
	UART_voidSendString("Enter a character: ");
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_voidSendString>
 	
    while (1) 
    {
		x = UART_u8ReceiveChar();
  b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_u8ReceiveChar>
		UART_voidSendChar(x);
  b6:	0e 94 65 00 	call	0xca	; 0xca <UART_voidSendChar>
  ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <UART_voidInit>:



void UART_voidInit(void){
	//SET_BIT(SREG,7);	
	UBRRL = 51;		//baudrate 9600 for 8MHz
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	89 b9       	out	0x09, r24	; 9
	UCSRB = 0x18;	//Enable RX , TX only without interrupts
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86;	//8-bit data
  c4:	86 e8       	ldi	r24, 0x86	; 134
  c6:	80 bd       	out	0x20, r24	; 32
  c8:	08 95       	ret

000000ca <UART_voidSendChar>:
}

void UART_voidSendChar(u8 data){
	
	while(GET_BIT(UCSRA,UDRE) == 0);
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <UART_voidSendChar>
	UDR = data;
  ce:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA,TXC) == 0);	//wait until data is transmitted
  d0:	5e 9b       	sbis	0x0b, 6	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <UART_voidSendChar+0x6>
	SET_BIT(UCSRA,TXC);
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	08 95       	ret

000000d8 <UART_u8ReceiveChar>:
}

u16 UART_u8ReceiveChar(void){
	
	while(GET_BIT(UCSRA,RXC)==0);
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <UART_u8ReceiveChar>
	
	SET_BIT(UCSRA,RXC);
  dc:	5f 9a       	sbi	0x0b, 7	; 11
	return UDR;
  de:	8c b1       	in	r24, 0x0c	; 12
}
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret

000000e4 <UART_voidSendString>:

void UART_voidSendString(u8* str){
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	8c 01       	movw	r16, r24
	u8 i = 0;
  ec:	c0 e0       	ldi	r28, 0x00	; 0
	do{	
		UART_voidSendChar(str[i]);
  ee:	f8 01       	movw	r30, r16
  f0:	ec 0f       	add	r30, r28
  f2:	f1 1d       	adc	r31, r1
  f4:	80 81       	ld	r24, Z
  f6:	0e 94 65 00 	call	0xca	; 0xca <UART_voidSendChar>
		i++;
  fa:	cf 5f       	subi	r28, 0xFF	; 255
	}while(str[i] != '\0');
  fc:	f8 01       	movw	r30, r16
  fe:	ec 0f       	add	r30, r28
 100:	f1 1d       	adc	r31, r1
 102:	80 81       	ld	r24, Z
 104:	81 11       	cpse	r24, r1
 106:	f3 cf       	rjmp	.-26     	; 0xee <UART_voidSendString+0xa>
	
}
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
